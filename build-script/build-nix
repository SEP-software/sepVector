#!/bin/env python
import sys
import string
import os
import shutil
from subprocess import Popen,PIPE

def help():
   print "build[build] - Directory to build project in"
   print "basePrefix - Prefix  where all local packages are installed"
   print "hypercube [basePrefix/hypercube]  - Where to instal hypercube"
   print "hypercube must be defined "
   print "Specify arguments on the command line in the form [basePrefix='/opt']"
   print "\n Example \n"+sys.argv[0]+" basePrefix='/opt'"


def buildArgs():
   args={}
   for a in sys.argv[1:]:
     b=a.split("=")
     if len(b)==2:
       args[b[0]]=b[1]
   return args

def defaultArgs(required,args):
  if "basePrefix" in args.keys():
     for m in required:
       if m not in args.keys():
         args[m]=args["basePrefix"]+"/"+m
  return args

def checkArgs(required,args):
  notDefined=[]
  for i in required:
    if i not in args.keys(): 
      notDefined.append(i)
  if len(notDefined)> 0: 
    print "The following parameters were not set "+string.join(notDefined)
    help()
    sys.exit(-1)

def runCommand(args,dir,fail):
   """
    Execute the external command and get its exitcode, stdout and stderr.
    """
   proc = Popen(args, stdout=PIPE, stderr=PIPE,cwd=dir)
   out, err = proc.communicate()
   exitcode = proc.returncode
   if exitcode!=0 and fail:
      print "Command failed \n"+string.join(args)
      print "\n Stdout\n"+out+"\nErr\n"+err
      sys.exit(-1)
   

def build(args):
   if  "build" not in args.keys():
     args["build"]="build"
   cwd = os.getcwd()
   buildDir=os.path.dirname(os.path.realpath(sys.argv[0]))
   parDir=buildDir+"/../"
   runCommand(["ls",args["build"]],cwd,False)
   if os.path.exists(args["build"]):
       shutil.rmtree(args["build"])
   if os.path.exists(args["hypercube"]):
       shutil.rmtree(args["hypercube"])
   runCommand(["mkdir","-p",args["build"]],cwd,True)
   runCommand(["cmake","-DCMAKE_INSTALL_PREFIX=%s"%args["hypercube"],parDir],args["build"],True)
   runCommand(["make"],args["build"],True)
   runCommand(["make","install"],args["build"],True)


req=["hypercube"]
args=defaultArgs(req,buildArgs())
checkArgs(req,args)
build(args)
